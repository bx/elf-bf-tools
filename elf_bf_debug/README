Copyright (c) 2012 Rebecca (bx) Shapiro

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


BUILD
You will need to build eglibc from scratch in order to use this tool.  setup.sh
should do all the work for you, just go ahead and run it.

building eglibc requies ~800Mb of free space.

RUNNING

run debug_rtld_exec.sh <path to executable> to debug the runtime loader as it
runs that executable.  It also loads a set of tools that can be used to inspect
a Brainfuck stack.  The following commands are available

elfbf setup <path to debug info>
   -This must always be run before any other debugging comand, the debug info is the file generated from elf_bf_compiler

elfbf tape
   -prints the entire tape

elfbf tape_range <low> <high>
   -prints the values on the tape between indices <low> and <high>

elfbf tape_value
   -prints the value the tape pointer is pointing to

elfbf tape_value_relative <index>
   -prints the value on the tape that is <index> hops away from where the tape pointer is pointing

elfbf tape_index
   -prints the current index in which the tape pointer is ponting

elfbf source
   -prints the bringfuck source

elfbf current_ins
   -prints the intruction and index of instruction that is currently being processed

elfbf go_to_next_ins:
   -processes relocation entries until it reaches entries for the next instruction

elfbf go_to_next_rel:
   -finishes processing the current relocation entry/begins processing the next

elfbf rel_num
   -prints the index of the relocation entry currently being processed

NOTE:
- debug_rtld_exec-rand.sh is the same as debug_rtld_exec.sh exectp it enables ASLR
- we use ddd because we seem to crash gdb